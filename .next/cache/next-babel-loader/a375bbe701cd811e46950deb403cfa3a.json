{"ast":null,"code":"$(function () {\n  // ナビゲーションのリンクを指定\n  var navLink = $('#gnav li a'); // 各コンテンツのページ上部からの開始位置と終了位置を配列に格納しておく\n\n  var contentsArr = new Array();\n\n  for (var i = 0; i < navLink.length; i++) {\n    // コンテンツのIDを取得\n    var targetContents = navLink.eq(i).attr('href'); // ページ内リンクでないナビゲーションが含まれている場合は除外する\n\n    if (targetContents.charAt(0) == '#') {\n      // ページ上部からコンテンツの開始位置までの距離を取得\n      var targetContentsTop = $(targetContents).offset().top; // ページ上部からコンテンツの終了位置までの距離を取得\n\n      var targetContentsBottom = targetContentsTop + $(targetContents).outerHeight(true) - 1; // 配列に格納\n\n      contentsArr[i] = [targetContentsTop, targetContentsBottom];\n    }\n  }\n\n  ; // 現在地をチェックする\n\n  function currentCheck() {\n    // 現在のスクロール位置を取得\n    var windowScrolltop = $(window).scrollTop();\n\n    for (var i = 0; i < contentsArr.length; i++) {\n      // 現在のスクロール位置が、配列に格納した開始位置と終了位置の間にあるものを調べる\n      if (contentsArr[i][0] <= windowScrolltop && contentsArr[i][1] >= windowScrolltop) {\n        // 開始位置と終了位置の間にある場合、ナビゲーションにclass=\"current\"をつける\n        navLink.removeClass('current');\n        navLink.eq(i).addClass('current');\n        i == contentsArr.length;\n      }\n    }\n\n    ;\n  } // ページ読み込み時とスクロール時に、現在地をチェックする\n\n\n  $(window).on('load scroll', function () {\n    currentCheck();\n  }); // ナビゲーションをクリックした時のスムーズスクロール\n\n  navLink.click(function () {\n    $('html,body').animate({\n      scrollTop: $($(this).attr('href')).offset().top\n    }, 300);\n    return false;\n  });\n});","map":{"version":3,"sources":["/Users/kerry/ceaper/styles/js/sideNav.js"],"names":["$","navLink","contentsArr","Array","i","length","targetContents","eq","attr","charAt","targetContentsTop","offset","top","targetContentsBottom","outerHeight","currentCheck","windowScrolltop","window","scrollTop","removeClass","addClass","on","click","animate"],"mappings":"AAAAA,CAAC,CAAC,YAAW;AACT;AACD,MAAIC,OAAO,GAAGD,CAAC,CAAC,YAAD,CAAf,CAFU,CAIT;;AACD,MAAIE,WAAW,GAAG,IAAIC,KAAJ,EAAlB;;AACD,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAAO,CAACI,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACpC;AACD,QAAIE,cAAc,GAAGL,OAAO,CAACM,EAAR,CAAWH,CAAX,EAAcI,IAAd,CAAmB,MAAnB,CAArB,CAFqC,CAGrC;;AACA,QAAGF,cAAc,CAACG,MAAf,CAAsB,CAAtB,KAA4B,GAA/B,EAAoC;AACjC;AACG,UAAIC,iBAAiB,GAAGV,CAAC,CAACM,cAAD,CAAD,CAAkBK,MAAlB,GAA2BC,GAAnD,CAF8B,CAGjC;;AACG,UAAIC,oBAAoB,GAAGH,iBAAiB,GAAGV,CAAC,CAACM,cAAD,CAAD,CAAkBQ,WAAlB,CAA8B,IAA9B,CAApB,GAA0D,CAArF,CAJ8B,CAKjC;;AACGZ,MAAAA,WAAW,CAACE,CAAD,CAAX,GAAiB,CAACM,iBAAD,EAAoBG,oBAApB,CAAjB;AACL;AACH;;AAAA,GAlBS,CAoBX;;AACC,WAASE,YAAT,GAAwB;AACpB;AACC,QAAIC,eAAe,GAAGhB,CAAC,CAACiB,MAAD,CAAD,CAAUC,SAAV,EAAtB;;AACA,SAAK,IAAId,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,WAAW,CAACG,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC1C;AACD,UAAGF,WAAW,CAACE,CAAD,CAAX,CAAe,CAAf,KAAqBY,eAArB,IAAwCd,WAAW,CAACE,CAAD,CAAX,CAAe,CAAf,KAAqBY,eAAhE,EAAiF;AAC3E;AACDf,QAAAA,OAAO,CAACkB,WAAR,CAAoB,SAApB;AACAlB,QAAAA,OAAO,CAACM,EAAR,CAAWH,CAAX,EAAcgB,QAAd,CAAuB,SAAvB;AACChB,QAAAA,CAAC,IAAIF,WAAW,CAACG,MAAjB;AACH;AACL;;AAAA;AACL,GAjCU,CAmCV;;;AACDL,EAAAA,CAAC,CAACiB,MAAD,CAAD,CAAUI,EAAV,CAAa,aAAb,EAA4B,YAAW;AACnCN,IAAAA,YAAY;AAChB,GAFA,EApCW,CAwCZ;;AACGd,EAAAA,OAAO,CAACqB,KAAR,CAAc,YAAW;AACvBtB,IAAAA,CAAC,CAAC,WAAD,CAAD,CAAeuB,OAAf,CAAuB;AACnBL,MAAAA,SAAS,EAAElB,CAAC,CAACA,CAAC,CAAC,IAAD,CAAD,CAAQQ,IAAR,CAAa,MAAb,CAAD,CAAD,CAAwBG,MAAxB,GAAiCC;AADzB,KAAvB,EAEI,GAFJ;AAGE,WAAO,KAAP;AACJ,GALA;AAMH,CA/CA,CAAD","sourcesContent":["$(function() {\n    // ナビゲーションのリンクを指定\n   var navLink = $('#gnav li a');\n\n    // 各コンテンツのページ上部からの開始位置と終了位置を配列に格納しておく\n   var contentsArr = new Array();\n  for (var i = 0; i < navLink.length; i++) {\n       // コンテンツのIDを取得\n      var targetContents = navLink.eq(i).attr('href');\n      // ページ内リンクでないナビゲーションが含まれている場合は除外する\n      if(targetContents.charAt(0) == '#') {\n         // ページ上部からコンテンツの開始位置までの距離を取得\n            var targetContentsTop = $(targetContents).offset().top;\n         // ページ上部からコンテンツの終了位置までの距離を取得\n            var targetContentsBottom = targetContentsTop + $(targetContents).outerHeight(true) - 1;\n         // 配列に格納\n            contentsArr[i] = [targetContentsTop, targetContentsBottom]\n      }\n   };\n\n  // 現在地をチェックする\n   function currentCheck() {\n       // 現在のスクロール位置を取得\n        var windowScrolltop = $(window).scrollTop();\n        for (var i = 0; i < contentsArr.length; i++) {\n           // 現在のスクロール位置が、配列に格納した開始位置と終了位置の間にあるものを調べる\n          if(contentsArr[i][0] <= windowScrolltop && contentsArr[i][1] >= windowScrolltop) {\n                // 開始位置と終了位置の間にある場合、ナビゲーションにclass=\"current\"をつける\n               navLink.removeClass('current');\n               navLink.eq(i).addClass('current');\n                i == contentsArr.length;\n            }\n       };\n  }\n\n   // ページ読み込み時とスクロール時に、現在地をチェックする\n  $(window).on('load scroll', function() {\n      currentCheck();\n });\n\n // ナビゲーションをクリックした時のスムーズスクロール\n    navLink.click(function() {\n      $('html,body').animate({\n          scrollTop: $($(this).attr('href')).offset().top\n       }, 300);\n        return false;\n   })\n});\n"]},"metadata":{},"sourceType":"script"}